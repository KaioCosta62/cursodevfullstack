O conceito de promise substitui na maioria dos casos o callback

Promises são promessas, onde eu executo uma função e ela me promete chamar outra função, quando ela terminar a execução dela, é muito utilizada em códigos assincronos

A promise nos devolve dois parâmetros: resolve e reject

function carregarFotos() {
  return new Promise((resolve, reject) => {
    const xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        const response = JSON.parse(this.responseText);
      }
    };

    xhttp.open('GET', 'https://jsonplaceholder.typicode.com/photos', true);
    xhttp.send();
  });
}

Nesse exemplo minha função carregarFotos vai retornar uma promise, que vai executar a requisição da API

Resolve e Reject são funções, é como se fosse callbacks

btnCarregar.addEventListener('click', () => {
  carregarFotos().then(exibirNaTela)
})

Quando houver um evento de click no meu btnCarregar, a minha função carregarFotos vai ser executada, logo após, o then está relacionado com o resolve(), ou seja, o que passamos para o resolve será executado no then()

O reject usamos quando da algum tipo de erro, ele está acessível ao método catch()

Funções que são promises dependem do then(resolve) e do catch(reject)